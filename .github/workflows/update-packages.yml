name: Update Packages

on:
  push:
    paths:
      - '*.deb'

jobs:
  update-packages:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up dpkg
      run: sudo apt-get install -y dpkg-dev

    - name: Generate new Packages file
      run: dpkg-scanpackages -m ./debs /dev/null > Packages.new || exit 0

    - name: Debug Packages.new
      run: cat Packages.new || echo "Packages.new not generated"

    - name: Debug Packages
      run: cat Packages || echo "Packages file not found"

    - name: Merge Packages files
      run: |
        if [ -f Packages.new ]; then
          # Create associative arrays for the new and existing packages
          declare -A new_packages
          declare -A old_packages

          # Read the new Packages file and store each package entry in the dictionary
          current_package=""
          while read -r line; do
            if [[ $line == "Package:"* ]]; then
              current_package=$(echo $line | cut -d ' ' -f 2)
              new_packages[$current_package]=""
            fi
            new_packages[$current_package]+="$line"$'\n'
          done < Packages.new

          # Read the existing Packages file and store each package entry in the dictionary
          current_package=""
          while read -r line; do
            if [[ $line == "Package:"* ]]; then
              current_package=$(echo $line | cut -d ' ' -f 2)
              old_packages[$current_package]=""
            fi
            old_packages[$current_package]+="$line"$'\n'
          done < Packages

          # Create a new Packages.merged file
          > Packages.merged

          # Merge the new and old packages
          for package in "${!new_packages[@]}"; do
            if [[ -n "${old_packages[$package]}" ]]; then
              section=$(echo "${old_packages[$package]}" | grep "^Section:" || echo "${new_packages[$package]}" | grep "^Section:")
              sileodepiction=$(echo "${old_packages[$package]}" | grep "^Sileodepiction:" || echo "${new_packages[$package]}" | grep "^Sileodepiction:")
              new_packages[$package]=$(echo "${new_packages[$package]}" | sed "/^Section:/d" | sed "/^Sileodepiction:/d")
              new_packages[$package]="$section"$'\n'"$sileodepiction"$'\n'"${new_packages[$package]}"
            fi
            echo "${new_packages[$package]}" >> Packages.merged
          done

          # Add any remaining old packages that were not in the new Packages file
          for package in "${!old_packages[@]}"; do
            if [[ -z "${new_packages[$package]}" ]]; then
              echo "${old_packages[$package]}" >> Packages.merged
            fi
          done

          mv Packages.merged Packages
          rm Packages.new
        else
          echo "No Packages.new file to process"
        fi

    - name: Compress Packages file
      run: |
        gzip -c Packages > Packages.gz
        bzip2 -c Packages > Packages.bz2

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git pull origin main
        git add Packages Packages.gz Packages.bz2
        git commit -m 'Update Packages file' || echo "No changes to commit"
        git push origin main || echo "Push failed"
