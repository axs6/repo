name: Update Packages

on:
  push:
    paths:
      - 'debs/*.deb'

jobs:
  update-packages:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up dpkg
      run: sudo apt-get install -y dpkg-dev

    - name: Generate new Packages file
      run: dpkg-scanpackages -m ./debs /dev/null > ./debs/Packages.new

    - name: Debug Packages.new
      run: cat ./debs/Packages.new

    - name: Debug Packages
      run: cat ./debs/Packages

    - name: Merge Packages files
      run: |
        declare -A new_packages
        declare -A old_packages

        current_package=""
        while read -r line; do
          if [[ $line == "Package:"* ]]; then
            current_package=$(echo $line | cut -d ' ' -f 2)
            new_packages[$current_package]=""
          fi
          new_packages[$current_package]+="$line"$'\n'
        done < ./debs/Packages.new

        current_package=""
        while read -r line; do
          if [[ $line == "Package:"* ]]; then
            current_package=$(echo $line | cut -d ' ' -f 2)
            old_packages[$current_package]=""
          fi
          old_packages[$current_package]+="$line"$'\n'
        done < ./debs/Packages

        echo "New Packages:"
        for package in "${!new_packages[@]}"; do
          echo "Package: $package"
          echo "${new_packages[$package]}"
        done

        echo "Old Packages:"
        for package in "${!old_packages[@]}"; do
          echo "Package: $package"
          echo "${old_packages[$package]}"
        done

        > ./debs/Packages.merged

        for package in "${!new_packages[@]}"; do
          if [[ -n "${old_packages[$package]}" ]]; then
            section=$(echo "${old_packages[$package]}" | grep "^Section:" || echo "${new_packages[$package]}" | grep "^Section:")
            sileodepiction=$(echo "${old_packages[$package]}" | grep "^Sileodepiction:" || echo "${new_packages[$package]}" | grep "^Sileodepiction:")
            new_packages[$package]=$(echo "${new_packages[$package]}" | sed "/^Section:/d" | sed "/^Sileodepiction:/d")
            new_packages[$package]="$section"$'\n'"$sileodepiction"$'\n'"${new_packages[$package]}"
          fi
          echo "${new_packages[$package]}" >> ./debs/Packages.merged
        done

        for package in "${!old_packages[@]}"; do
          if [[ -z "${new_packages[$package]}" ]]; then
            echo "${old_packages[$package]}" >> ./debs/Packages.merged
          fi
        done

        mv ./debs/Packages.merged ./debs/Packages
        rm ./debs/Packages.new

    - name: Compress Packages file
      run: |
        gzip -c ./debs/Packages > ./debs/Packages.gz
        bzip2 -c ./debs/Packages > ./debs/Packages.bz2

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git pull origin main
        git add ./debs/Packages ./debs/Packages.gz ./debs/Packages.bz2
        git commit -m 'Update Packages file' || echo "No changes to commit"
        git push origin main || echo "Push failed"
